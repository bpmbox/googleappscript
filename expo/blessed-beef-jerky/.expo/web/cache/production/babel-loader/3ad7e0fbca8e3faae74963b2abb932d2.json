{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _constants$platform;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly){symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});}keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{CodedError,NativeModulesProxy}from'expo-modules-core';import Platform from\"react-native-web/dist/exports/Platform\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{AppOwnership,ExecutionEnvironment,UserInterfaceIdiom}from\"./Constants.types\";import ExponentConstants from\"./ExponentConstants\";export{AppOwnership,ExecutionEnvironment,UserInterfaceIdiom};if(!ExponentConstants){console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");}var rawManifest=null;if(NativeModulesProxy.ExpoUpdates){var updatesManifest;if(NativeModulesProxy.ExpoUpdates.manifest){updatesManifest=NativeModulesProxy.ExpoUpdates.manifest;}else if(NativeModulesProxy.ExpoUpdates.manifestString){updatesManifest=JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);}if(updatesManifest&&Object.keys(updatesManifest).length>0){rawManifest=updatesManifest;}}if(NativeModules.EXDevLauncher){var devLauncherManifest;if(NativeModules.EXDevLauncher.manifestString){devLauncherManifest=JSON.parse(NativeModules.EXDevLauncher.manifestString);}if(devLauncherManifest&&Object.keys(devLauncherManifest).length>0){rawManifest=devLauncherManifest;}}if(!rawManifest&&ExponentConstants&&ExponentConstants.manifest){rawManifest=ExponentConstants.manifest;if(typeof rawManifest==='string'){rawManifest=JSON.parse(rawManifest);}}var _ref=ExponentConstants||{},name=_ref.name,appOwnership=_ref.appOwnership,nativeConstants=_objectWithoutProperties(_ref,[\"name\",\"appOwnership\"]);var warnedAboutDeviceYearClass=false;var warnedAboutIosModel=false;var warnedAboutInstallationId=false;var warnedAboutDeviceId=false;var warnedAboutLinkingUrl=false;var constants=_objectSpread(_objectSpread({},nativeConstants),{},{appOwnership:appOwnership!=null?appOwnership:null});var constantsPropertiesGetter={deviceYearClass:function deviceYearClass(){if(!warnedAboutDeviceYearClass){console.warn(\"Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.\");warnedAboutDeviceYearClass=true;}return nativeConstants.deviceYearClass;},installationId:function installationId(){if(!warnedAboutInstallationId){console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");warnedAboutInstallationId=true;}return nativeConstants.installationId;},deviceId:function deviceId(){if(!warnedAboutDeviceId){console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");warnedAboutDeviceId=true;}return nativeConstants.installationId;},linkingUrl:function linkingUrl(){if(!warnedAboutLinkingUrl){console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");warnedAboutLinkingUrl=true;}return nativeConstants.linkingUri;},manifest:function manifest(){var maybeManifest=getManifest();if(!maybeManifest||!isAppManifest(maybeManifest)){return null;}return maybeManifest;},manifest2:function manifest2(){var maybeManifest=getManifest();if(!maybeManifest||!isManifest(maybeManifest)){return null;}return maybeManifest;},__unsafeNoWarnManifest:function __unsafeNoWarnManifest(){var maybeManifest=getManifest(true);if(!maybeManifest||!isAppManifest(maybeManifest)){return null;}return maybeManifest;},__unsafeNoWarnManifest2:function __unsafeNoWarnManifest2(){var maybeManifest=getManifest(true);if(!maybeManifest||!isManifest(maybeManifest)){return null;}return maybeManifest;}};definePropertiesGetter(constants,constantsPropertiesGetter);Object.defineProperty(constants,'__rawManifest_TEST',{get:function get(){return rawManifest;},set:function set(value){rawManifest=value;},enumerable:false});if(constants!=null&&(_constants$platform=constants.platform)!=null&&_constants$platform.ios){var originalModel=nativeConstants.platform.ios.model;definePropertiesGetter(constants.platform.ios,{model:function model(){if(!warnedAboutIosModel){console.warn(\"Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.\");warnedAboutIosModel=true;}return originalModel;}});}function definePropertiesGetter(target,props){for(var _i=0,_Object$entries=Object.entries(props);_i<_Object$entries.length;_i++){var _ref2=_Object$entries[_i];var _ref3=_slicedToArray(_ref2,2);var _name=_ref3[0];var func=_ref3[1];Object.defineProperty(target,_name,{get:func,enumerable:false});}}function isAppManifest(manifest){return!isManifest(manifest);}function isManifest(manifest){return'metadata'in manifest;}function getManifest(){var suppressWarning=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!rawManifest){var invalidManifestType=rawManifest===null?'null':'undefined';if(nativeConstants.executionEnvironment===ExecutionEnvironment.Bare&&Platform.OS!=='web'){if(!suppressWarning){console.warn(\"Constants.manifest is \"+invalidManifestType+\" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");}}else if(nativeConstants.executionEnvironment===ExecutionEnvironment.StoreClient||nativeConstants.executionEnvironment===ExecutionEnvironment.Standalone){throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\"Constants.manifest is \"+invalidManifestType+\", must be an object.\");}}return rawManifest;}export default constants;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutDeviceYearClass = false;\nlet warnedAboutIosModel = false;\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nconst constantsPropertiesGetter: AccessorProps = {\n  // Deprecated fields\n  deviceYearClass() {\n    if (!warnedAboutDeviceYearClass) {\n      console.warn(\n        `Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.`\n      );\n      warnedAboutDeviceYearClass = true;\n    }\n    return nativeConstants.deviceYearClass;\n  },\n  // Deprecated fields\n  installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  manifest(): AppManifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  manifest2(): Manifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest(): AppManifest | Manifest | null {\n    const maybeManifest = getManifest(true);\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest2(): Manifest | Manifest | null {\n    const maybeManifest = getManifest(true);\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n};\ndefinePropertiesGetter(constants, constantsPropertiesGetter);\n\nObject.defineProperty(constants, '__rawManifest_TEST', {\n  get(): AppManifest | Manifest | null {\n    return rawManifest;\n  },\n  set(value: AppManifest | Manifest | null) {\n    rawManifest = value;\n  },\n  // Prevent the warning from being thrown, or the value from being used when the user interacts with the entire object.\n  enumerable: false,\n});\n\n// Add deprecation warning for `platform.ios.model`\nif (constants?.platform?.ios) {\n  const originalModel = nativeConstants.platform.ios.model;\n  definePropertiesGetter(constants.platform.ios, {\n    model() {\n      if (!warnedAboutIosModel) {\n        console.warn(\n          `Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.`\n        );\n        warnedAboutIosModel = true;\n      }\n      return originalModel;\n    },\n  });\n}\n\ntype AccessorProps = Record<string, () => any>;\nfunction definePropertiesGetter(target: object, props: AccessorProps) {\n  for (const [name, func] of Object.entries(props)) {\n    Object.defineProperty(target, name, {\n      get: func,\n      // Prevent the warning from being thrown, or the value from being used when the user interacts with the entire object.\n      enumerable: false,\n    });\n  }\n}\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}